{"version":3,"sources":["views/Seed.module.css","views/Index.js","views/Account.js","views/Seed.js","views/NanoKeys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SeedContainer","Seed","Index","react_default","a","createElement","react","className","react_router_dom","to","Account","state","loading","balance","blocks","this","fetchData","fetch","concat","props","address","resp","json","data","error","setState","updateParent","bind","account","pending","parseInt","block_count","_this$state","onLoaded","onBalance","onBlocks","index","style","wordWrap","href","target","React","Component","cx","classNames","styles","hasBalance","hasBlocks","loadCount","secretKey","nano","seed","publicKey","classes","Account_Account","Object","assign","updateMethods","defineProperty","_this2","MAX_PAGES","BigNumber","dividedToIntegerBy","config","seedsPerPage","plus","NanoKeys","_ref","match","currentPage","params","page","startSeed","multipliedBy","minus","nextRandom","minimum","random","toString","length","NanoKeys_Navigation","NanoKeys_Seeds","Navigation","_ref2","gt","toFixed","eq","Seeds","_ref3","components","i","padStart","push","Seed_Seed","key","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de5933d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SeedContainer\":\"Seed_SeedContainer__2V4Wa\",\"Seed\":\"Seed_Seed__llczQ\"};","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Index() {\n  return (\n    <Fragment>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Nano-Seeds.lol</h1>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <Link className=\"btn btn-lg btn-primary\" to=\"/nano/1\">\n            Begin\n          </Link>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","import React from \"react\";\n\nexport default class Account extends React.Component {\n  state = { loading: true, balance: 0, blocks: 0 };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    const resp = await fetch(\n      `https://api.nanocrawler.cc/account/${this.props.address}`\n    );\n\n    const data = await resp.json();\n\n    if (data.error) {\n      this.setState(\n        {\n          loading: false,\n          balance: 0,\n          blocks: 0\n        },\n        this.updateParent.bind(this)\n      );\n    } else {\n      this.setState(\n        {\n          loading: false,\n          balance: data.account.balance + data.account.pending,\n          blocks: parseInt(data.account.block_count)\n        },\n        this.updateParent.bind(this)\n      );\n    }\n  }\n\n  updateParent() {\n    const { balance, blocks } = this.state;\n\n    this.props.onLoaded();\n    if (balance > 0) return this.props.onBalance();\n    if (blocks > 0) return this.props.onBlocks();\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-6\">\n        <p className=\"mb-0\">\n          <small>Address {this.props.index}</small>\n        </p>\n        <p className=\"text-monospace\" style={{ wordWrap: \"break-word\" }}>\n          <a\n            href={`https://nanocrawler.cc/explorer/account/${\n              this.props.address\n            }/history`}\n            target=\"_blank\"\n          >\n            {this.props.address}\n          </a>\n        </p>\n\n        <p>\n          {this.state.balance} NANO ({this.state.blocks} blocks)\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport classNames from \"classnames/bind\";\nimport * as nano from \"nanocurrency\";\n\nimport Account from \"./Account\";\nimport styles from \"./Seed.module.css\";\nconst cx = classNames.bind(styles);\n\nexport default class Seed extends React.Component {\n  state = {\n    hasBalance: false,\n    hasBlocks: false,\n    loadCount: 0\n  };\n\n  address(index) {\n    const secretKey = nano.deriveSecretKey(this.props.seed, index);\n    const publicKey = nano.derivePublicKey(secretKey);\n    return nano.deriveAddress(publicKey);\n  }\n\n  get classes() {\n    let state;\n\n    if (this.state.loadCount < 2) state = \"light\";\n    else if (this.state.hasBalance) state = \"success\";\n    else if (this.state.hasBlocks) state = \"warning\";\n    else state = \"danger\";\n\n    return cx(\"row\", \"mb-2\", {\n      SeedContainer: true,\n      [`border-${state}`]: true\n    });\n  }\n\n  get updateMethods() {\n    return {\n      onLoaded: () => this.setState({ loadCount: this.state.loadCount + 1 }),\n      onBalance: () => this.setState({ hasBalance: true }),\n      onBlocks: () => this.setState({ hasBlocks: true })\n    };\n  }\n\n  render() {\n    return (\n      <div className={this.classes}>\n        <div className=\"col\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <p className=\"mb-0\">\n                <small>Seed</small>\n              </p>\n              <p className={cx(\"text-monospace\", styles.Seed)}>\n                {this.props.seed}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <Account\n              address={this.address(0)}\n              index={1}\n              {...this.updateMethods}\n            />\n            <Account\n              address={this.address(1)}\n              index={2}\n              {...this.updateMethods}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BigNumber from \"bignumber.js\";\nimport Seed from \"./Seed\";\n\nimport config from \"../config.json\";\n\nconst MAX_ADDRESSES = BigNumber(\n  \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"\n);\nconst MAX_PAGES = MAX_ADDRESSES.dividedToIntegerBy(config.seedsPerPage).plus(1);\n\nexport default function NanoKeys({ match }) {\n  const currentPage = BigNumber(match.params.page);\n  const startSeed = BigNumber(config.seedsPerPage).multipliedBy(\n    currentPage.minus(1)\n  );\n\n  const nextRandom = BigNumber.minimum(\n    BigNumber.random(MAX_PAGES.toString(10).length).multipliedBy(MAX_PAGES),\n    MAX_PAGES\n  );\n\n  return (\n    <Fragment>\n      <div className=\"row mb-5\">\n        <div className=\"col\">\n          <p className=\"text-center\">\n            Page\n            <br />\n            <b>{match.params.page}</b>\n            <br />\n            of\n            <br />\n            <b>{MAX_PAGES.toString(10)}</b>\n            <br />\n          </p>\n        </div>\n      </div>\n\n      <Navigation currentPage={currentPage} nextRandom={nextRandom} />\n      <Seeds startSeed={startSeed} />\n      <Navigation currentPage={currentPage} nextRandom={nextRandom} />\n    </Fragment>\n  );\n}\n\nconst Navigation = ({ currentPage, nextRandom }) => (\n  <div className=\"row justify-content-center my-5\">\n    <div className=\"col-auto\">\n      <div className=\"btn-group\">\n        <Link className=\"btn btn-primary\" to=\"/nano/1\">\n          First\n        </Link>\n        {currentPage.gt(1) && (\n          <Link\n            className=\"btn btn-primary\"\n            to={`/nano/${currentPage.minus(1).toFixed(0)}`}\n          >\n            Previous\n          </Link>\n        )}\n        <Link className=\"btn btn-primary\" to={`/nano/${nextRandom.toFixed(0)}`}>\n          Random\n        </Link>\n        {!currentPage.eq(MAX_PAGES) && (\n          <Link\n            className=\"btn btn-primary\"\n            to={`/nano/${currentPage.plus(1).toFixed(0)}`}\n          >\n            Next\n          </Link>\n        )}\n        <Link\n          className=\"btn btn-primary\"\n          to={`/nano/${MAX_PAGES.toString(10)}`}\n        >\n          Last\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n\nconst Seeds = ({ startSeed }) => {\n  const endSeed = startSeed.plus(config.seedsPerPage);\n  let components = [];\n  for (let i = 0; i < config.seedsPerPage; i++) {\n    const seed = startSeed\n      .plus(i)\n      .toString(16)\n      .padStart(64, \"0\");\n\n    components.push(<Seed seed={seed} key={seed} />);\n  }\n\n  return <Fragment>{components}</Fragment>;\n};\n","import React, { Fragment } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nimport Index from \"./views/Index\";\nimport NanoKeys from \"./views/NanoKeys\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <nav className=\"navbar fixed-top navbar-light bg-light\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Nano-Seeds.lol\n        </Link>\n      </nav>\n\n      <div className=\"container mt-5 pt-5\">\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/nano/:page\" component={NanoKeys} />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap.native/dist/bootstrap-native-v4\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}